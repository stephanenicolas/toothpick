apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
  }
}

repositories {
  mavenCentral()
  jcenter()
}

//from https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac
task jacocoTestReport << {
  FileCollection executionData = files()

  subprojects.findAll { subproject -> subproject.pluginManager.hasPlugin('java') && subproject.pluginManager.hasPlugin('jacoco')
  }.each { subproject -> executionData += subproject.tasks.jacocoTestReport.executionData
  }

  executionData = files(executionData.findAll {
    it.exists()
  })

  ant.taskdef(name: 'jacocoReport', classname: 'org.jacoco.ant.ReportTask',
      classpath: configurations.jacocoAnt.asPath)

  ant.jacocoReport {
    executiondata {
      executionData.addToAntBuilder(ant, 'resources')
    }
    structure(name: project.name) {
      subprojects.findAll { subproject -> subproject.pluginManager.hasPlugin('java')
      }.each { subproject ->
        group(name: subproject.name) {
          classfiles {
            ((FileCollection) subproject.sourceSets.main.output).filter {
              it.exists()
            }.addToAntBuilder(ant, 'resources')
          }
          sourcefiles {
            files((Set<File>) subproject.sourceSets.main.allJava.srcDirs).filter {
              it.exists()
            }.addToAntBuilder(ant, 'resources')
          }
        }
      }
    }
    html(destdir: "${buildDir}/reports/jacoco/${name}/html")
    xml(destfile: "${buildDir}/reports/jacoco/${name}/${name}.xml")
    // Uncomment for CSV
    //csv(destfile: "${buildDir}/reports/jacoco/${name}/${name}.csv")
  }
}

coveralls {
  jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
  sourceDirs = files(subprojects.collect { subproject -> "${subproject.projectDir}/src/main/java" }).files.absolutePath
}

tasks.coveralls {
  dependsOn 'jacocoTestReport'
}

subprojects { project ->
  group = GROUP
  version = VERSION_NAME

  repositories {
    mavenCentral()
    jcenter()
  }

  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'maven'

  checkstyle {
    configFile rootProject.file('checkstyle.xml')

  }

  task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    ignoreFailures true
    showViolations true
    include '**/*.java'

    classpath = files()
  }

  afterEvaluate {
    if (project.tasks.findByName('check') && project.pluginManager.hasPlugin('java')) {
      check.dependsOn('checkstyle')
      check.dependsOn('jacocoTestReport')

      tasks.withType(Test) {

        testLogging {
          events "passed", "skipped", "failed"
        }
        // ensure tasks don't overwrite the default report directories used by the 'test' task
        reports.html.destination = "${buildDir}/reports/${name}"
        reports.junitXml.destination = "${buildDir}/reports/${name}/results"
        binResultsDir = file("${buildDir}/reports/${name}/results/binary/${name}")
      }
    }
  }
}

ext.deps = [// Common
            inject              : 'javax.inject:javax.inject:1',

            // Compiler
            javapoet            : 'com.squareup:javapoet:1.4.0',

            // Android
            android             : 'com.google.android:android:4.1.1.4',
            supportv4           : 'com.google.android:support-v4:r7',
            supportv7           : 'com.android.support:appcompat-v7:23.3.0',
            supportAnnotations  : 'com.android.support:support-annotations:23.3.0',
            butterknife         : 'com.jakewharton:butterknife:8.0.0',
            butterknife_compiler: 'com.jakewharton:butterknife-compiler:8.0.0',
            rxandroid           : 'io.reactivex:rxandroid:0.23.0',

            // Test dependencies
            junit               : 'junit:junit:4.12',
            hamcrest            : 'org.hamcrest:java-hamcrest:2.0.0.0',
            truth               : 'com.google.truth:truth:0.27',
            compiletesting      : 'com.google.testing.compile:compile-testing:0.7',
            easymock            : 'org.easymock:easymock:3.4',
            powermock           : 'org.powermock:powermock-easymock-release-full:1.6.4',
            robolectric         : 'org.robolectric:robolectric:3.0',]
